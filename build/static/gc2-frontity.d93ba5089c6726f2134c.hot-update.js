webpackHotUpdate("gc2-frontity",{

/***/ "./packages/grafikcentralen/src/components/acf/blog_front.js":
/*!*******************************************************************!*\
  !*** ./packages/grafikcentralen/src/components/acf/blog_front.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");\n/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _frontity_connect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @frontity/connect */ \"./node_modules/@frontity/connect/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _frontity_components_link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @frontity/components/link */ \"./node_modules/@frontity/components/link/index.tsx\");\n/* harmony import */ var react_on_screen__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-on-screen */ \"./node_modules/react-on-screen/lib/index.js\");\n/* harmony import */ var react_on_screen__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_on_screen__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const BlogFront=({libraries,startpost,header,isVisible,state})=>{const[showCount,setCount]=Object(react__WEBPACK_IMPORTED_MODULE_6__[\"useState\"])(3);const Html=libraries.html2react.Component;const key=\"allposts/\";const acf=\"acf-settings/\";const posts=state.source.data[key].items;const startPost=state.source.data[key].items.filter(x=>x.id===startpost.ID);const forfattare=state.source.data[acf].acf.forfattare.filter(x=>x.post===startPost[0].author);const timeIcon=state.source.data[acf].acf.time_icon;const Wrapper=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g15\",label:\"Wrapper\"})( false?undefined:{name:\"12ysisd\",styles:\"display:flex;flex-direction:column;justify-content:center;max-width:1290px;align-items:center;margin:0 auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Header=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g14\",label:\"Header\"})( false?undefined:{name:\"1hw38ik\",styles:\"margin-top:4rem;text-align:center;h2{text-transform:uppercase;font-size:4rem;@media(max-width: 500px){font-size:2rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFx3ZWJiXFxnYzItZnJvbnRpdHlcXHBhY2thZ2VzXFxncmFmaWtjZW50cmFsZW5cXHNyY1xcY29tcG9uZW50c1xcYWNmXFxibG9nX2Zyb250LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThCNkIiLCJmaWxlIjoiQzpcXHdlYmJcXGdjMi1mcm9udGl0eVxccGFja2FnZXNcXGdyYWZpa2NlbnRyYWxlblxcc3JjXFxjb21wb25lbnRzXFxhY2ZcXGJsb2dfZnJvbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29ubmVjdCBmcm9tIFwiQGZyb250aXR5L2Nvbm5lY3RcIlxyXG5pbXBvcnQge3N0eWxlZCwga2V5ZnJhbWVzfSBmcm9tIFwiZnJvbnRpdHlcIlxyXG5pbXBvcnQge3VzZVN0YXRlfSBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgTGluayBmcm9tIFwiQGZyb250aXR5L2NvbXBvbmVudHMvbGlua1wiO1xyXG5pbXBvcnQgVHJhY2tWaXNpYmlsaXR5IGZyb20gJ3JlYWN0LW9uLXNjcmVlbic7XHJcbmNvbnN0IEJsb2dGcm9udCA9ICh7bGlicmFyaWVzLCBzdGFydHBvc3QsIGhlYWRlciwgIGlzVmlzaWJsZSwgc3RhdGV9KSA9PiB7XHJcblxyXG4gICAgY29uc3QgW3Nob3dDb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoMylcclxuICAgIGNvbnN0IEh0bWwgPSBsaWJyYXJpZXMuaHRtbDJyZWFjdC5Db21wb25lbnQ7XHJcbiAgICBjb25zdCBrZXkgPSBcImFsbHBvc3RzL1wiXHJcbiAgICBjb25zdCBhY2YgPSBcImFjZi1zZXR0aW5ncy9cIlxyXG5cclxuICAgIGNvbnN0IHBvc3RzID0gc3RhdGUuc291cmNlLmRhdGFba2V5XS5pdGVtc1xyXG4gICAgY29uc3Qgc3RhcnRQb3N0ID0gc3RhdGUuc291cmNlLmRhdGFba2V5XS5pdGVtcy5maWx0ZXIoKHgpPT4geC5pZCA9PT0gc3RhcnRwb3N0LklEKVxyXG4gICAgY29uc3QgZm9yZmF0dGFyZSA9IHN0YXRlLnNvdXJjZS5kYXRhW2FjZl0uYWNmLmZvcmZhdHRhcmUuZmlsdGVyKCAoeCk9PiB4LnBvc3QgPT09IHN0YXJ0UG9zdFswXS5hdXRob3IpXHJcbiAgICBjb25zdCB0aW1lSWNvbiA9IHN0YXRlLnNvdXJjZS5kYXRhW2FjZl0uYWNmLnRpbWVfaWNvblxyXG4gICBcclxuICAgIFxyXG5cclxuXHJcbiAgICBjb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICAgICAgICBkaXNwbGF5OiBmbGV4OyBcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uIDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBtYXgtd2lkdGg6IDEyOTBweCA7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlciA7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcblxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IEhlYWRlciA9IHN0eWxlZC5kaXZgXHJcbiAgICAgICAgbWFyZ2luLXRvcDogNHJlbTtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG4gICAgICAgIGgyIHtcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZSA7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogNHJlbSA7XHJcbiAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbSA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRBcnRpY2xlID0gc3R5bGVkLmFydGljbGVgXHJcbiAgICAgICAgICAgIG1hcmdpbjogMnJlbTtcclxuICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDBweCAxNXB4IDNweCAjMDAwMDAwMmI7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDgwMHB4KXtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDFyZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcGxheTogZmxleCA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgYFxyXG5cclxuXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRDb250ZW50ID0gc3R5bGVkLmRpdmBcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gO1xyXG4gICAgICAgIHBhZGRpbmc6IDJyZW0gO1xyXG4gICAgICAgIEBtZWRpYShtYXgtd2lkdGg6ODAwcHgpe1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoMiB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA2MDBweCl7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuN3JlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICBcclxuICAgIGAgICAgXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRJbWFnZSA9IHN0eWxlZC5pbWdgXHJcbiAgICAgICAgbWluLXdpZHRoOiA4MDBweDtcclxuICAgICAgXHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogMTMzMHB4KXtcclxuICAgICAgICAgICAgbWluLXdpZHRoOiAzMDBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgICAgICBtaW4td2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgIGhlaWdodDogMjAwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgXHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiA1NTBweCA7XHJcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXIgO1xyXG4gICAgYFxyXG5cclxuY29uc3QgYXV0aG9yID0gc3RhdGUuc291cmNlLmRhdGFbYWNmXS5hY2YuZm9yZmF0dGFyZS5maWx0ZXIoICh4KT0+IHgucG9zdCA9PT0gU3RyaW5nKHN0YXJ0UG9zdFswXS5hdXRob3IpIClcclxuXHJcblxyXG5cclxuY29uc3QgUHJvZmlsZXBpYyA9IHN0eWxlZC5pbWdgXHJcbiAgICBvYmplY3QtZml0OiBjb3ZlcjtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIHdpZHRoOiA0MHB4O1xyXG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMSk7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbmBcclxuXHJcbmNvbnN0IEF1dGhvciA9IHN0eWxlZC5hZGRyZXNzYFxyXG4gICAgZGlzcGxheTogZmxleCA7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93IDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbSA7XHJcbiAgICBwIHtcclxuICAgICBcclxuICAgIH1cclxuICBcclxuYFxyXG5cclxuY29uc3QgQXV0aG9yTmFtZSA9IHN0eWxlZC5wIGBcclxuICAgIGZvbnQtc3R5bGU6IGluaXRpYWw7XHJcbiAgICBtYXJnaW4tbGVmdDogMXJlbTtcclxuICAgIGNvbG9yOiAjMjk1MTZEO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxMHB4ICFpbXBvcnRhbnQgO1xyXG4gICAgICAgIHBhZGRpbmc6IDAgO1xyXG4gICAgfVxyXG4gICAgYFxyXG5cclxuY29uc3QgVGltZSA9IHN0eWxlZC50aW1lYFxyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICBmb250LXNpemU6IDEycHggO1xyXG4gICAgZm9udC1zdHlsZTogaW5pdGlhbCA7XHJcbiAgICBkaXNwbGF5OiBmbGV4IDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyIDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgO1xyXG4gICAgcCB7XHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDhweCAhaW1wb3J0YW50IDtcclxuICAgICAgICB9XHJcbiAgICB9IFxyXG5cclxuICAgIGltZyB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4IDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAzcHg7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IE1vYmlsZSA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgfVxyXG5gXHJcblxyXG5jb25zdCBEZXNrdG9wID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IFJlY2VudFBvc3RzID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgMWZyIDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDgwMHB4KXtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciA7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IFBvc3QgPSBzdHlsZWQuYXJ0aWNsZWBcclxuICAgICBtYXJnaW46IDJyZW07XHJcbiAgICAgZGlzcGxheTogZmxleCA7XHJcbiAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiA7XHJcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTVweCAzcHggIzAwMDAwMDJiO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA4MDBweCl7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAxcmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXggO1xyXG5gXHJcblxyXG5jb25zdCBQb3N0SW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gICAgb2JqZWN0LWZpdDogY292ZXIgO1xyXG4gICAgaGVpZ2h0OiAxNTBweCA7XHJcbiAgICB3aWR0aDogMTAwJSA7XHJcbmBcclxuXHJcbmNvbnN0IFJlYWRtb3JlID0gc3R5bGVkKExpbmspYFxyXG4gICAgICAgIGNvbG9yOiAjNzI5ZWUxO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDAgO1xyXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcyOWVlMSAgO1xyXG4gICAgICAgIHdpZHRoOiBtYXgtY29udGVudDtcclxuICAgICAgICBtYXJnaW4tdG9wOiBhdXRvO1xyXG4gICAgICAgICBcclxuYFxyXG5cclxuY29uc3QgTGlua0NhcmQgPSBzdHlsZWQoTGluaylgXHJcbiAgICBjb2xvcjogaW5oZXJpdDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdDtcclxuYFxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldEF1dGhvcihwb3N0QXV0aG9yKXtcclxuICAgIHJldHVybiBzdGF0ZS5zb3VyY2UuZGF0YVthY2ZdLmFjZi5mb3JmYXR0YXJlLmZpbHRlciggKHgpPT4geC5wb3N0ID09PSBTdHJpbmcocG9zdEF1dGhvcikgKVswXVxyXG59XHJcblxyXG5yZXR1cm4gKFxyXG4gICAgPFdyYXBwZXI+XHJcbiAgICA8SGVhZGVyPiAgICBcclxuICAgIDxIdG1sIGh0bWw9e2hlYWRlcn0vPlxyXG4gICAgPC9IZWFkZXI+XHJcbiAgICA8RmVhdHVyZWRBcnRpY2xlPlxyXG4gICAgICAgICAgICAgICAgPERlc2t0b3A+XHJcbiAgICAgICAgICAgICAgICA8RmVhdHVyZWRJbWFnZSBzcmM9e3N0YXJ0UG9zdFswXS5mZWF0dXJlZF9pbWFnZV9zcmN9IC8+XHJcbiAgICAgICAgICAgICAgICA8L0Rlc2t0b3A+XHJcbiAgICAgICAgPEZlYXR1cmVkQ29udGVudD5cclxuICAgICBcclxuICAgICAgICAgICAgPEF1dGhvcj5cclxuICAgICAgICAgICAgICAgIDxQcm9maWxlcGljIHNyYz17YXV0aG9yWzBdLmJpbGQudXJsfSBhbHQ9e2F1dGhvclswXS5hbHR9IHdpZHRoPXthdXRob3JbMF0ud2lkdGh9IGhlaWdodD17YXV0aG9yWzBdLmhlaWdodH0gLz5cclxuICAgICAgICAgICAgICAgIDxBdXRob3JOYW1lIHJlbD1cImF1dGhvclwiPnthdXRob3JbMF0ubmFtbn08L0F1dGhvck5hbWU+XHJcbiAgICAgICAgICAgICAgICA8VGltZSBwdWJkYXRlIGRhdGV0aW1lPXtzdGFydFBvc3RbMF0uZGF0ZX0+IFxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aW1lSWNvbi51cmx9IGFsdD17dGltZUljb24uYWx0fSB3aWR0aD17dGltZUljb24ud2lkdGh9IGhlaWdodD17dGltZUljb24uaGVpZ2h0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+e3N0YXJ0UG9zdFswXS5kYXRlLnNwbGl0KFwiVFwiKVswXX08L3A+XHJcbiAgICAgICAgICAgICAgICA8L1RpbWU+XHJcbiAgICAgICAgICAgIDwvQXV0aG9yPlxyXG4gICAgICAgICAgICA8TW9iaWxlPlxyXG4gICAgICAgICAgICAgICAgPEZlYXR1cmVkSW1hZ2Ugc3JjPXtzdGFydFBvc3RbMF0uZmVhdHVyZWRfaW1hZ2Vfc3JjfSAvPlxyXG4gICAgICAgICAgICA8L01vYmlsZT5cclxuICAgICAgICAgICAgPGgyPntzdGFydFBvc3RbMF0udGl0bGUucmVuZGVyZWR9PC9oMj5cclxuICAgICAgICAgICAgPEh0bWwgaHRtbD17c3RhcnRQb3N0WzBdLmV4Y2VycHQucmVuZGVyZWR9IC8+IFxyXG4gICAgICAgICAgICA8UmVhZG1vcmUgaHJlZj17c3RhcnRQb3N0WzBdLmxpbmt9PiBMw6RzIGhlbGEgYXJ0aWtlbG48L1JlYWRtb3JlPlxyXG4gICAgICAgICAgICB7Y29uc29sZS5sb2coXCJzdGFydHBvc3RcIiwgc3RhcnRQb3N0WzBdKX1cclxuICAgICAgICA8L0ZlYXR1cmVkQ29udGVudD5cclxuXHJcblxyXG4gICAgICAgIDwvRmVhdHVyZWRBcnRpY2xlPlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxSZWNlbnRQb3N0cz5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vQWxsIHBvc3RzXHJcbiAgICAgICAgcG9zdHMubWFwKCh4LGkpPT4gXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIHtpIDwgc2hvd0NvdW50P1xyXG4gICAgICAgIDxQb3N0PlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPExpbmtDYXJkIGxpbms9e3gubGlua30+XHJcbiAgICAgICAgICAgICAgICA8QXV0aG9yPlxyXG4gICAgICAgICAgICAgICAgPFByb2ZpbGVwaWMgc3JjPXtnZXRBdXRob3IoeC5hdXRob3IpLmJpbGQudXJsfSBhbHQ9e2dldEF1dGhvcih4LmF1dGhvcikuYWx0fSB3aWR0aD17Z2V0QXV0aG9yKHguYXV0aG9yKS53aWR0aH0gaGVpZ2h0PXtnZXRBdXRob3IoeC5hdXRob3IpLmhlaWdodH0gLz5cclxuICAgICAgICAgICAgICAgIDxBdXRob3JOYW1lIHJlbD1cImF1dGhvclwiPntnZXRBdXRob3IoeC5hdXRob3IpLm5hbW59PC9BdXRob3JOYW1lPlxyXG4gICAgICAgICAgICAgICAgPFRpbWUgcHViZGF0ZSBkYXRldGltZT17eC5tb2RpZmllZH0+IFxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aW1lSWNvbi51cmx9IGFsdD17dGltZUljb24uYWx0fSB3aWR0aD17dGltZUljb24ud2lkdGh9IGhlaWdodD17dGltZUljb24uaGVpZ2h0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+e3gubW9kaWZpZWQuc3BsaXQoXCJUXCIpWzBdfTwvcD5cclxuICAgICAgICAgICAgICAgIDwvVGltZT5cclxuICAgICAgICAgICAgICAgIDwvQXV0aG9yPlxyXG4gICAgICAgICAgICAgICAgPHA+e3gudGl0bGUucmVuZGVyZWR9PC9wPlxyXG4gICAgICAgICAgICAgICAgPFBvc3RJbWFnZSBzcmM9e3guZmVhdHVyZWRfaW1hZ2Vfc3JjfSAvPlxyXG4gICAgICAgICAgICAgICAgPEh0bWwgaHRtbD17eC5leGNlcnB0LnJlbmRlcmVkfSAvPlxyXG4gICAgICAgICAgICAgICAgPFJlYWRtb3JlIGxpbms9e3gubGlua30+IOKAoiBMw6RzIGhlbGEgYXJ0aWtlbG48L1JlYWRtb3JlPlxyXG4gICAgICAgICAgICAgICAgPC9MaW5rQ2FyZD5cclxuXHJcblxyXG4gICAgICAgICAgICA8L1Bvc3Q+XHJcbiAgICAgICAgICAgICAgICA6XCJcIn1cclxuICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIDwvUmVjZW50UG9zdHM+XHJcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+IHNldENvdW50KDk5KX0+IFZpc2EgZmxlciBueWhldGVyPC9idXR0b24+IFxyXG5cclxuXHJcbiAgICA8L1dyYXBwZXI+XHJcblxyXG4pXHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEJsb2dGcm9udClcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const FeaturedArticle=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"article\", false?undefined:{target:\"ekuka3g13\",label:\"FeaturedArticle\"})( false?undefined:{name:\"1cnj0jd\",styles:\"margin:2rem;box-shadow:0px 0px 15px 3px #0000002b;padding:2rem;@media(max-width: 800px){padding:0;margin:1rem;}display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const FeaturedContent=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g12\",label:\"FeaturedContent\"})( false?undefined:{name:\"zg39q2\",styles:\"display:flex;flex-direction:column;padding:2rem;@media(max-width:800px){padding:1rem;}h2{font-size:18px;@media(max-width: 600px){font-size:14px;}}p{@media(max-width: 600px){font-size:0.7rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const FeaturedImage=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"img\", false?undefined:{target:\"ekuka3g11\",label:\"FeaturedImage\"})( false?undefined:{name:\"jhz0dy\",styles:\"min-width:800px;@media(max-width: 1330px){min-width:300px;}@media(max-width: 800px){min-width:100%;height:200px;}width:100%;height:550px;object-fit:cover\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const author=state.source.data[acf].acf.forfattare.filter(x=>x.post===String(startPost[0].author));const Profilepic=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"img\", false?undefined:{target:\"ekuka3g10\",label:\"Profilepic\"})( false?undefined:{name:\"e72zod\",styles:\"object-fit:cover;height:40px;width:40px;filter:grayscale(1);border-radius:50%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Author=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"address\", false?undefined:{target:\"ekuka3g9\",label:\"Author\"})( false?undefined:{name:\"iq2825\",styles:\"display:flex;flex-direction:row;align-items:center;font-size:12px;margin-bottom:2rem;p{}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const AuthorName=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"p\", false?undefined:{target:\"ekuka3g8\",label:\"AuthorName\"})( false?undefined:{name:\"1kq41hy\",styles:\"font-style:initial;margin-left:1rem;color:#29516D;@media(max-width: 600px){font-size:10px!important;padding:0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Time=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"time\", false?undefined:{target:\"ekuka3g7\",label:\"Time\"})( false?undefined:{name:\"o2rsq1\",styles:\"margin-left:auto;font-size:12px;font-style:initial;display:flex;justify-content:center;align-items:center;p{@media(max-width: 600px){font-size:8px!important;}}img{margin-right:10px;margin-bottom:3px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Mobile=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g6\",label:\"Mobile\"})( false?undefined:{name:\"17lygek\",styles:\"display:none;@media(max-width: 800px){display:block;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Desktop=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g5\",label:\"Desktop\"})( false?undefined:{name:\"1aoy9fr\",styles:\"display:block;@media(max-width: 800px){display:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const RecentPosts=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g4\",label:\"RecentPosts\"})( false?undefined:{name:\"15ahxrn\",styles:\"display:grid;grid-template-columns:1fr 1fr 1fr;@media(max-width: 800px){grid-template-columns:1fr;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Post=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"article\", false?undefined:{target:\"ekuka3g3\",label:\"Post\"})( false?undefined:{name:\"10bcsi9\",styles:\"margin:2rem;display:flex;flex-direction:column;box-shadow:0px 0px 15px 3px #0000002b;padding:2rem;@media(max-width: 800px){padding:0;margin:1rem;}display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostImage=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"img\", false?undefined:{target:\"ekuka3g2\",label:\"PostImage\"})( false?undefined:{name:\"1qcpa4d\",styles:\"object-fit:cover;height:150px;width:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Readmore=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_7__[\"default\"], false?undefined:{target:\"ekuka3g1\",label:\"Readmore\"})( false?undefined:{name:\"am7vci\",styles:\"color:#729ee1;font-weight:500;text-decoration:none;border-bottom:1px solid #729ee1;width:max-content;margin-top:auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const LinkCard=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_7__[\"default\"], false?undefined:{target:\"ekuka3g0\",label:\"LinkCard\"})( false?undefined:{name:\"1byi2su\",styles:\"color:inherit;text-decoration:inherit\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFx3ZWJiXFxnYzItZnJvbnRpdHlcXHBhY2thZ2VzXFxncmFmaWtjZW50cmFsZW5cXHNyY1xcY29tcG9uZW50c1xcYWNmXFxibG9nX2Zyb250LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNNNkIiLCJmaWxlIjoiQzpcXHdlYmJcXGdjMi1mcm9udGl0eVxccGFja2FnZXNcXGdyYWZpa2NlbnRyYWxlblxcc3JjXFxjb21wb25lbnRzXFxhY2ZcXGJsb2dfZnJvbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29ubmVjdCBmcm9tIFwiQGZyb250aXR5L2Nvbm5lY3RcIlxyXG5pbXBvcnQge3N0eWxlZCwga2V5ZnJhbWVzfSBmcm9tIFwiZnJvbnRpdHlcIlxyXG5pbXBvcnQge3VzZVN0YXRlfSBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgTGluayBmcm9tIFwiQGZyb250aXR5L2NvbXBvbmVudHMvbGlua1wiO1xyXG5pbXBvcnQgVHJhY2tWaXNpYmlsaXR5IGZyb20gJ3JlYWN0LW9uLXNjcmVlbic7XHJcbmNvbnN0IEJsb2dGcm9udCA9ICh7bGlicmFyaWVzLCBzdGFydHBvc3QsIGhlYWRlciwgIGlzVmlzaWJsZSwgc3RhdGV9KSA9PiB7XHJcblxyXG4gICAgY29uc3QgW3Nob3dDb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoMylcclxuICAgIGNvbnN0IEh0bWwgPSBsaWJyYXJpZXMuaHRtbDJyZWFjdC5Db21wb25lbnQ7XHJcbiAgICBjb25zdCBrZXkgPSBcImFsbHBvc3RzL1wiXHJcbiAgICBjb25zdCBhY2YgPSBcImFjZi1zZXR0aW5ncy9cIlxyXG5cclxuICAgIGNvbnN0IHBvc3RzID0gc3RhdGUuc291cmNlLmRhdGFba2V5XS5pdGVtc1xyXG4gICAgY29uc3Qgc3RhcnRQb3N0ID0gc3RhdGUuc291cmNlLmRhdGFba2V5XS5pdGVtcy5maWx0ZXIoKHgpPT4geC5pZCA9PT0gc3RhcnRwb3N0LklEKVxyXG4gICAgY29uc3QgZm9yZmF0dGFyZSA9IHN0YXRlLnNvdXJjZS5kYXRhW2FjZl0uYWNmLmZvcmZhdHRhcmUuZmlsdGVyKCAoeCk9PiB4LnBvc3QgPT09IHN0YXJ0UG9zdFswXS5hdXRob3IpXHJcbiAgICBjb25zdCB0aW1lSWNvbiA9IHN0YXRlLnNvdXJjZS5kYXRhW2FjZl0uYWNmLnRpbWVfaWNvblxyXG4gICBcclxuICAgIFxyXG5cclxuXHJcbiAgICBjb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICAgICAgICBkaXNwbGF5OiBmbGV4OyBcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uIDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBtYXgtd2lkdGg6IDEyOTBweCA7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlciA7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcblxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IEhlYWRlciA9IHN0eWxlZC5kaXZgXHJcbiAgICAgICAgbWFyZ2luLXRvcDogNHJlbTtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG4gICAgICAgIGgyIHtcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZSA7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogNHJlbSA7XHJcbiAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbSA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRBcnRpY2xlID0gc3R5bGVkLmFydGljbGVgXHJcbiAgICAgICAgICAgIG1hcmdpbjogMnJlbTtcclxuICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDBweCAxNXB4IDNweCAjMDAwMDAwMmI7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDgwMHB4KXtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDFyZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcGxheTogZmxleCA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgYFxyXG5cclxuXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRDb250ZW50ID0gc3R5bGVkLmRpdmBcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gO1xyXG4gICAgICAgIHBhZGRpbmc6IDJyZW0gO1xyXG4gICAgICAgIEBtZWRpYShtYXgtd2lkdGg6ODAwcHgpe1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoMiB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA2MDBweCl7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuN3JlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICBcclxuICAgIGAgICAgXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRJbWFnZSA9IHN0eWxlZC5pbWdgXHJcbiAgICAgICAgbWluLXdpZHRoOiA4MDBweDtcclxuICAgICAgXHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogMTMzMHB4KXtcclxuICAgICAgICAgICAgbWluLXdpZHRoOiAzMDBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgICAgICBtaW4td2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgIGhlaWdodDogMjAwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgXHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiA1NTBweCA7XHJcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXIgO1xyXG4gICAgYFxyXG5cclxuY29uc3QgYXV0aG9yID0gc3RhdGUuc291cmNlLmRhdGFbYWNmXS5hY2YuZm9yZmF0dGFyZS5maWx0ZXIoICh4KT0+IHgucG9zdCA9PT0gU3RyaW5nKHN0YXJ0UG9zdFswXS5hdXRob3IpIClcclxuXHJcblxyXG5cclxuY29uc3QgUHJvZmlsZXBpYyA9IHN0eWxlZC5pbWdgXHJcbiAgICBvYmplY3QtZml0OiBjb3ZlcjtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIHdpZHRoOiA0MHB4O1xyXG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMSk7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbmBcclxuXHJcbmNvbnN0IEF1dGhvciA9IHN0eWxlZC5hZGRyZXNzYFxyXG4gICAgZGlzcGxheTogZmxleCA7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93IDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbSA7XHJcbiAgICBwIHtcclxuICAgICBcclxuICAgIH1cclxuICBcclxuYFxyXG5cclxuY29uc3QgQXV0aG9yTmFtZSA9IHN0eWxlZC5wIGBcclxuICAgIGZvbnQtc3R5bGU6IGluaXRpYWw7XHJcbiAgICBtYXJnaW4tbGVmdDogMXJlbTtcclxuICAgIGNvbG9yOiAjMjk1MTZEO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxMHB4ICFpbXBvcnRhbnQgO1xyXG4gICAgICAgIHBhZGRpbmc6IDAgO1xyXG4gICAgfVxyXG4gICAgYFxyXG5cclxuY29uc3QgVGltZSA9IHN0eWxlZC50aW1lYFxyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICBmb250LXNpemU6IDEycHggO1xyXG4gICAgZm9udC1zdHlsZTogaW5pdGlhbCA7XHJcbiAgICBkaXNwbGF5OiBmbGV4IDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyIDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgO1xyXG4gICAgcCB7XHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDhweCAhaW1wb3J0YW50IDtcclxuICAgICAgICB9XHJcbiAgICB9IFxyXG5cclxuICAgIGltZyB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4IDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAzcHg7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IE1vYmlsZSA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgfVxyXG5gXHJcblxyXG5jb25zdCBEZXNrdG9wID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IFJlY2VudFBvc3RzID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgMWZyIDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDgwMHB4KXtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciA7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IFBvc3QgPSBzdHlsZWQuYXJ0aWNsZWBcclxuICAgICBtYXJnaW46IDJyZW07XHJcbiAgICAgZGlzcGxheTogZmxleCA7XHJcbiAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiA7XHJcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTVweCAzcHggIzAwMDAwMDJiO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA4MDBweCl7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAxcmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXggO1xyXG5gXHJcblxyXG5jb25zdCBQb3N0SW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gICAgb2JqZWN0LWZpdDogY292ZXIgO1xyXG4gICAgaGVpZ2h0OiAxNTBweCA7XHJcbiAgICB3aWR0aDogMTAwJSA7XHJcbmBcclxuXHJcbmNvbnN0IFJlYWRtb3JlID0gc3R5bGVkKExpbmspYFxyXG4gICAgICAgIGNvbG9yOiAjNzI5ZWUxO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDAgO1xyXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcyOWVlMSAgO1xyXG4gICAgICAgIHdpZHRoOiBtYXgtY29udGVudDtcclxuICAgICAgICBtYXJnaW4tdG9wOiBhdXRvO1xyXG4gICAgICAgICBcclxuYFxyXG5cclxuY29uc3QgTGlua0NhcmQgPSBzdHlsZWQoTGluaylgXHJcbiAgICBjb2xvcjogaW5oZXJpdDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdDtcclxuYFxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldEF1dGhvcihwb3N0QXV0aG9yKXtcclxuICAgIHJldHVybiBzdGF0ZS5zb3VyY2UuZGF0YVthY2ZdLmFjZi5mb3JmYXR0YXJlLmZpbHRlciggKHgpPT4geC5wb3N0ID09PSBTdHJpbmcocG9zdEF1dGhvcikgKVswXVxyXG59XHJcblxyXG5yZXR1cm4gKFxyXG4gICAgPFdyYXBwZXI+XHJcbiAgICA8SGVhZGVyPiAgICBcclxuICAgIDxIdG1sIGh0bWw9e2hlYWRlcn0vPlxyXG4gICAgPC9IZWFkZXI+XHJcbiAgICA8RmVhdHVyZWRBcnRpY2xlPlxyXG4gICAgICAgICAgICAgICAgPERlc2t0b3A+XHJcbiAgICAgICAgICAgICAgICA8RmVhdHVyZWRJbWFnZSBzcmM9e3N0YXJ0UG9zdFswXS5mZWF0dXJlZF9pbWFnZV9zcmN9IC8+XHJcbiAgICAgICAgICAgICAgICA8L0Rlc2t0b3A+XHJcbiAgICAgICAgPEZlYXR1cmVkQ29udGVudD5cclxuICAgICBcclxuICAgICAgICAgICAgPEF1dGhvcj5cclxuICAgICAgICAgICAgICAgIDxQcm9maWxlcGljIHNyYz17YXV0aG9yWzBdLmJpbGQudXJsfSBhbHQ9e2F1dGhvclswXS5hbHR9IHdpZHRoPXthdXRob3JbMF0ud2lkdGh9IGhlaWdodD17YXV0aG9yWzBdLmhlaWdodH0gLz5cclxuICAgICAgICAgICAgICAgIDxBdXRob3JOYW1lIHJlbD1cImF1dGhvclwiPnthdXRob3JbMF0ubmFtbn08L0F1dGhvck5hbWU+XHJcbiAgICAgICAgICAgICAgICA8VGltZSBwdWJkYXRlIGRhdGV0aW1lPXtzdGFydFBvc3RbMF0uZGF0ZX0+IFxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aW1lSWNvbi51cmx9IGFsdD17dGltZUljb24uYWx0fSB3aWR0aD17dGltZUljb24ud2lkdGh9IGhlaWdodD17dGltZUljb24uaGVpZ2h0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+e3N0YXJ0UG9zdFswXS5kYXRlLnNwbGl0KFwiVFwiKVswXX08L3A+XHJcbiAgICAgICAgICAgICAgICA8L1RpbWU+XHJcbiAgICAgICAgICAgIDwvQXV0aG9yPlxyXG4gICAgICAgICAgICA8TW9iaWxlPlxyXG4gICAgICAgICAgICAgICAgPEZlYXR1cmVkSW1hZ2Ugc3JjPXtzdGFydFBvc3RbMF0uZmVhdHVyZWRfaW1hZ2Vfc3JjfSAvPlxyXG4gICAgICAgICAgICA8L01vYmlsZT5cclxuICAgICAgICAgICAgPGgyPntzdGFydFBvc3RbMF0udGl0bGUucmVuZGVyZWR9PC9oMj5cclxuICAgICAgICAgICAgPEh0bWwgaHRtbD17c3RhcnRQb3N0WzBdLmV4Y2VycHQucmVuZGVyZWR9IC8+IFxyXG4gICAgICAgICAgICA8UmVhZG1vcmUgaHJlZj17c3RhcnRQb3N0WzBdLmxpbmt9PiBMw6RzIGhlbGEgYXJ0aWtlbG48L1JlYWRtb3JlPlxyXG4gICAgICAgICAgICB7Y29uc29sZS5sb2coXCJzdGFydHBvc3RcIiwgc3RhcnRQb3N0WzBdKX1cclxuICAgICAgICA8L0ZlYXR1cmVkQ29udGVudD5cclxuXHJcblxyXG4gICAgICAgIDwvRmVhdHVyZWRBcnRpY2xlPlxyXG4gICAgICAgIFxyXG4gICAgICAgIDxSZWNlbnRQb3N0cz5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vQWxsIHBvc3RzXHJcbiAgICAgICAgcG9zdHMubWFwKCh4LGkpPT4gXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIHtpIDwgc2hvd0NvdW50P1xyXG4gICAgICAgIDxQb3N0PlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPExpbmtDYXJkIGxpbms9e3gubGlua30+XHJcbiAgICAgICAgICAgICAgICA8QXV0aG9yPlxyXG4gICAgICAgICAgICAgICAgPFByb2ZpbGVwaWMgc3JjPXtnZXRBdXRob3IoeC5hdXRob3IpLmJpbGQudXJsfSBhbHQ9e2dldEF1dGhvcih4LmF1dGhvcikuYWx0fSB3aWR0aD17Z2V0QXV0aG9yKHguYXV0aG9yKS53aWR0aH0gaGVpZ2h0PXtnZXRBdXRob3IoeC5hdXRob3IpLmhlaWdodH0gLz5cclxuICAgICAgICAgICAgICAgIDxBdXRob3JOYW1lIHJlbD1cImF1dGhvclwiPntnZXRBdXRob3IoeC5hdXRob3IpLm5hbW59PC9BdXRob3JOYW1lPlxyXG4gICAgICAgICAgICAgICAgPFRpbWUgcHViZGF0ZSBkYXRldGltZT17eC5tb2RpZmllZH0+IFxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aW1lSWNvbi51cmx9IGFsdD17dGltZUljb24uYWx0fSB3aWR0aD17dGltZUljb24ud2lkdGh9IGhlaWdodD17dGltZUljb24uaGVpZ2h0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+e3gubW9kaWZpZWQuc3BsaXQoXCJUXCIpWzBdfTwvcD5cclxuICAgICAgICAgICAgICAgIDwvVGltZT5cclxuICAgICAgICAgICAgICAgIDwvQXV0aG9yPlxyXG4gICAgICAgICAgICAgICAgPHA+e3gudGl0bGUucmVuZGVyZWR9PC9wPlxyXG4gICAgICAgICAgICAgICAgPFBvc3RJbWFnZSBzcmM9e3guZmVhdHVyZWRfaW1hZ2Vfc3JjfSAvPlxyXG4gICAgICAgICAgICAgICAgPEh0bWwgaHRtbD17eC5leGNlcnB0LnJlbmRlcmVkfSAvPlxyXG4gICAgICAgICAgICAgICAgPFJlYWRtb3JlIGxpbms9e3gubGlua30+IOKAoiBMw6RzIGhlbGEgYXJ0aWtlbG48L1JlYWRtb3JlPlxyXG4gICAgICAgICAgICAgICAgPC9MaW5rQ2FyZD5cclxuXHJcblxyXG4gICAgICAgICAgICA8L1Bvc3Q+XHJcbiAgICAgICAgICAgICAgICA6XCJcIn1cclxuICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIDwvUmVjZW50UG9zdHM+XHJcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+IHNldENvdW50KDk5KX0+IFZpc2EgZmxlciBueWhldGVyPC9idXR0b24+IFxyXG5cclxuXHJcbiAgICA8L1dyYXBwZXI+XHJcblxyXG4pXHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KEJsb2dGcm9udClcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});function getAuthor(postAuthor){return state.source.data[acf].acf.forfattare.filter(x=>x.post===String(postAuthor))[0];}return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Wrapper,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Header,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Html,{html:header})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(FeaturedArticle,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Desktop,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(FeaturedImage,{src:startPost[0].featured_image_src})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(FeaturedContent,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Author,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Profilepic,{src:author[0].bild.url,alt:author[0].alt,width:author[0].width,height:author[0].height}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(AuthorName,{rel:\"author\",children:author[0].namn}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Time,{pubdate:true,datetime:startPost[0].date,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:timeIcon.url,alt:timeIcon.alt,width:timeIcon.width,height:timeIcon.height}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:startPost[0].date.split(\"T\")[0]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Mobile,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(FeaturedImage,{src:startPost[0].featured_image_src})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h2\",{children:startPost[0].title.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Html,{html:startPost[0].excerpt.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Readmore,{href:startPost[0].link,children:\" L\\xE4s hela artikeln\"}),console.log(\"startpost\",startPost[0])]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(RecentPosts,{children://All posts\nposts.map((x,i)=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"Fragment\"],{children:i<showCount?Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Post,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(LinkCard,{link:x.link,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Author,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Profilepic,{src:getAuthor(x.author).bild.url,alt:getAuthor(x.author).alt,width:getAuthor(x.author).width,height:getAuthor(x.author).height}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(AuthorName,{rel:\"author\",children:getAuthor(x.author).namn}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Time,{pubdate:true,datetime:x.modified,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:timeIcon.url,alt:timeIcon.alt,width:timeIcon.width,height:timeIcon.height}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:x.modified.split(\"T\")[0]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:x.title.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(PostImage,{src:x.featured_image_src}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Html,{html:x.excerpt.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Readmore,{link:x.link,children:\" \\u2022 L\\xE4s hela artikeln\"})]})}):\"\"}))}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"button\",{onClick:()=>setCount(99),children:\" Visa fler nyheter\"})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_frontity_connect__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(BlogFront));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/grafikcentralen/src/components/acf/blog_front.js\n");

/***/ }),

/***/ "./packages/grafikcentralen/src/components/page.js":
/*!*********************************************************!*\
  !*** ./packages/grafikcentralen/src/components/page.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _acf_hero__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./acf/hero */ \"./packages/grafikcentralen/src/components/acf/hero.js\");\n/* harmony import */ var _frontity_components_switch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @frontity/components/switch */ \"./node_modules/@frontity/components/switch.tsx\");\n/* harmony import */ var react_on_screen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-on-screen */ \"./node_modules/react-on-screen/lib/index.js\");\n/* harmony import */ var react_on_screen__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_on_screen__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _acf_link_blocks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./acf/link_blocks */ \"./packages/grafikcentralen/src/components/acf/link_blocks.js\");\n/* harmony import */ var _acf_front_form__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./acf/front_form */ \"./packages/grafikcentralen/src/components/acf/front_form.js\");\n/* harmony import */ var _acf_om_oss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./acf/om_oss */ \"./packages/grafikcentralen/src/components/acf/om_oss.js\");\n/* harmony import */ var _acf_clients__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./acf/clients */ \"./packages/grafikcentralen/src/components/acf/clients.js\");\n/* harmony import */ var _acf_pageIntro__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./acf/pageIntro */ \"./packages/grafikcentralen/src/components/acf/pageIntro.js\");\n/* harmony import */ var _acf_infoBox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./acf/infoBox */ \"./packages/grafikcentralen/src/components/acf/infoBox.js\");\n/* harmony import */ var _acf_styled_list__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./acf/styled_list */ \"./packages/grafikcentralen/src/components/acf/styled_list.js\");\n/* harmony import */ var _acf_static_banner__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./acf/static_banner */ \"./packages/grafikcentralen/src/components/acf/static_banner.js\");\n/* harmony import */ var _acf_blog_front__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./acf/blog_front */ \"./packages/grafikcentralen/src/components/acf/blog_front.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nconst Block=({isVisible,text,image})=>{const style={background:isVisible?'red':'blue',height:\"500px\"};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_hero__WEBPACK_IMPORTED_MODULE_1__[\"default\"],{text:text,image:image,isVisible:isVisible});};const Page=({state})=>{const data=state.source.get(state.router.link);const blocks=state.source.page[data.id].acf.innehall;let block;return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"Fragment\"],{children:blocks.map((x,i)=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsxs\"])(\"div\",{children:[block=x.acf_fc_layout,Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsxs\"])(_frontity_components_switch__WEBPACK_IMPORTED_MODULE_2__[\"default\"],{children:[block=x.acf_fc_layout,Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(react_on_screen__WEBPACK_IMPORTED_MODULE_3___default.a,{when:block===\"hero\",offset:350,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(Block,{text:x.text,animation:true,image:x.image})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_link_blocks__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{when:block===\"link_blocks\",title:x.title,text:x.text,blocks:x.blocks,arrow:x.arrow}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_front_form__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{when:block===\"front_form\",text:x.text}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_om_oss__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{when:block===\"om_oss\",rubrik:x.rubrik,divider:x.divider,logo:x.logo,introtext:x.introtext,profilbild:x.profilbild,argument:x.argument}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_clients__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{when:block===\"clients\",introtext:x.introtext,clients:x.clients}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_pageIntro__WEBPACK_IMPORTED_MODULE_9__[\"default\"],{when:block===\"page_intro\",api:x}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_infoBox__WEBPACK_IMPORTED_MODULE_10__[\"default\"],{when:block===\"infobox\",api:x}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_styled_list__WEBPACK_IMPORTED_MODULE_11__[\"default\"],{when:block===\"styled_list\",api:x}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_static_banner__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{when:block===\"static_banner\",api:state.source.data,data:x}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_front_form__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{when:block===\"kontaktformular\",text:x.text}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__[\"jsx\"])(_acf_blog_front__WEBPACK_IMPORTED_MODULE_13__[\"default\"],{when:block===\"blog_front\",header:x.header,startpost:x.startpost})]})]},i))});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"connect\"])(Page));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9ncmFmaWtjZW50cmFsZW4vc3JjL2NvbXBvbmVudHMvcGFnZS5qcz9iMWI1Il0sIm5hbWVzIjpbIkJsb2NrIiwiaXNWaXNpYmxlIiwidGV4dCIsImltYWdlIiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwiaGVpZ2h0IiwiUGFnZSIsInN0YXRlIiwiZGF0YSIsInNvdXJjZSIsImdldCIsInJvdXRlciIsImxpbmsiLCJibG9ja3MiLCJwYWdlIiwiaWQiLCJhY2YiLCJpbm5laGFsbCIsImJsb2NrIiwibWFwIiwieCIsImkiLCJhY2ZfZmNfbGF5b3V0IiwidGl0bGUiLCJhcnJvdyIsInJ1YnJpayIsImRpdmlkZXIiLCJsb2dvIiwiaW50cm90ZXh0IiwicHJvZmlsYmlsZCIsImFyZ3VtZW50IiwiY2xpZW50cyIsImhlYWRlciIsInN0YXJ0cG9zdCIsImNvbm5lY3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBbUJBLEtBQU1BLE1BQUssQ0FBRyxDQUFDLENBQUVDLFNBQUYsQ0FBY0MsSUFBZCxDQUFvQkMsS0FBcEIsQ0FBRCxHQUFpQyxDQUM3QyxLQUFNQyxNQUFLLENBQUcsQ0FDVkMsVUFBVSxDQUFFSixTQUFTLENBQUksS0FBSixDQUFZLE1BRHZCLENBRVZLLE1BQU0sQ0FBRSxPQUZFLENBQWQsQ0FJQSxNQUNFLHlFQUFDLGlEQUFELEVBQU0sSUFBSSxDQUFFSixJQUFaLENBQWtCLEtBQUssQ0FBRUMsS0FBekIsQ0FBZ0MsU0FBUyxDQUFHRixTQUE1QyxFQURGLENBR0QsQ0FSRCxDQVVBLEtBQU1NLEtBQUksQ0FBRSxDQUFDLENBQUNDLEtBQUQsQ0FBRCxHQUFZLENBQ3RCLEtBQU1DLEtBQUksQ0FBR0QsS0FBSyxDQUFDRSxNQUFOLENBQWFDLEdBQWIsQ0FBaUJILEtBQUss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aWxlIjoiLi9wYWNrYWdlcy9ncmFmaWtjZW50cmFsZW4vc3JjL2NvbXBvbmVudHMvcGFnZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwiZnJvbnRpdHlcIlxyXG5pbXBvcnQgSGVybyBmcm9tIFwiLi9hY2YvaGVyb1wiO1xyXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJAZnJvbnRpdHkvY29tcG9uZW50cy9zd2l0Y2hcIlxyXG5pbXBvcnQgVHJhY2tWaXNpYmlsaXR5IGZyb20gJ3JlYWN0LW9uLXNjcmVlbic7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IExpbmtCbG9ja3MgZnJvbSBcIi4vYWNmL2xpbmtfYmxvY2tzXCI7XHJcbmltcG9ydCBGcm9udF9mb3JtIGZyb20gXCIuL2FjZi9mcm9udF9mb3JtXCI7XHJcbmltcG9ydCBPbV9vc3MgZnJvbSBcIi4vYWNmL29tX29zc1wiO1xyXG5pbXBvcnQgQ2xpZW50cyBmcm9tIFwiLi9hY2YvY2xpZW50c1wiO1xyXG5pbXBvcnQgcGFnZUludHJvIGZyb20gXCIuL2FjZi9wYWdlSW50cm9cIjtcclxuaW1wb3J0IFBhZ2VJbnRybyBmcm9tIFwiLi9hY2YvcGFnZUludHJvXCI7XHJcbmltcG9ydCBJbmZvQm94IGZyb20gXCIuL2FjZi9pbmZvQm94XCI7XHJcbmltcG9ydCBTdHlsZWRfbGlzdCBmcm9tIFwiLi9hY2Yvc3R5bGVkX2xpc3RcIjtcclxuaW1wb3J0IFN0YXRpY0Jhbm5lciBmcm9tIFwiLi9hY2Yvc3RhdGljX2Jhbm5lclwiO1xyXG5pbXBvcnQgQmxvZ0Zyb250IGZyb20gXCIuL2FjZi9ibG9nX2Zyb250XCJcclxuXHJcblxyXG5cclxuXHJcbmNvbnN0IEJsb2NrID0gKHsgaXNWaXNpYmxlICwgdGV4dCwgaW1hZ2UgfSkgPT4ge1xyXG4gIGNvbnN0IHN0eWxlID0ge1xyXG4gICAgICBiYWNrZ3JvdW5kOiBpc1Zpc2libGUgID8gJ3JlZCcgOiAnYmx1ZScsXHJcbiAgICAgIGhlaWdodDogXCI1MDBweFwiXHJcbiAgfTtcclxuICByZXR1cm4gKFxyXG4gICAgPEhlcm8gdGV4dD17dGV4dH0gaW1hZ2U9e2ltYWdlfSBpc1Zpc2libGUgPXtpc1Zpc2libGUgfS8+XHJcbiAgKTtcclxufVxyXG5cclxuY29uc3QgUGFnZSA9KHtzdGF0ZX0pPT4ge1xyXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcclxuICBjb25zdCBibG9ja3MgPSBzdGF0ZS5zb3VyY2UucGFnZVtkYXRhLmlkXS5hY2YuaW5uZWhhbGxcclxuXHJcbiAgbGV0IGJsb2NrXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAge2Jsb2Nrcy5tYXAoKHgsaSk9PiBcclxuICAgIDxkaXYga2V5PXtpfT5cclxuICAgICAge2Jsb2NrID0geC5hY2ZfZmNfbGF5b3V0fVxyXG4gICAgICBcclxuICAgICAgPFN3aXRjaD5cclxuICAgICAge2Jsb2NrID0geC5hY2ZfZmNfbGF5b3V0fVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICA8VHJhY2tWaXNpYmlsaXR5IHdoZW49e2Jsb2NrID09PSBcImhlcm9cIn0gb2Zmc2V0PXszNTB9PlxyXG4gICAgICAgICAgPEJsb2NrIHRleHQ9e3gudGV4dH0gYW5pbWF0aW9uPXt0cnVlfSBpbWFnZT17eC5pbWFnZX0vPlxyXG4gICAgICAgIDwvVHJhY2tWaXNpYmlsaXR5PlxyXG5cclxuICAgICAgICA8TGlua0Jsb2NrcyB3aGVuPXtibG9jayA9PT0gXCJsaW5rX2Jsb2Nrc1wifSB0aXRsZT17eC50aXRsZX0gdGV4dD17eC50ZXh0fSBibG9ja3M9e3guYmxvY2tzfSBhcnJvdz17eC5hcnJvd30gLz5cclxuICAgICAgICBcclxuICAgICAgICA8RnJvbnRfZm9ybSB3aGVuPXtibG9jayA9PT0gXCJmcm9udF9mb3JtXCJ9dGV4dD17eC50ZXh0fS8+XHJcbiAgICAgIFxyXG4gICAgICAgIDxPbV9vc3Mgd2hlbj17YmxvY2sgPT09IFwib21fb3NzXCJ9IHJ1YnJpaz17eC5ydWJyaWt9IGRpdmlkZXI9e3guZGl2aWRlcn0gbG9nbz17eC5sb2dvfSBpbnRyb3RleHQ9e3guaW50cm90ZXh0fSBwcm9maWxiaWxkPXt4LnByb2ZpbGJpbGR9IGFyZ3VtZW50PXt4LmFyZ3VtZW50fS8+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPENsaWVudHMgd2hlbj17YmxvY2sgPT09IFwiY2xpZW50c1wifSBpbnRyb3RleHQ9e3guaW50cm90ZXh0fSBjbGllbnRzPXt4LmNsaWVudHN9Lz5cclxuICAgICAgICBcclxuICAgICAgICA8UGFnZUludHJvIHdoZW49e2Jsb2NrID09PSBcInBhZ2VfaW50cm9cIn0gYXBpPXt4fSAvPlxyXG5cclxuICAgICAgICA8SW5mb0JveCB3aGVuPXtibG9jayA9PT0gXCJpbmZvYm94XCJ9IGFwaT17eH0gLz5cclxuICAgICAgXHJcbiAgICAgICAgPFN0eWxlZF9saXN0IHdoZW49e2Jsb2NrID09PSBcInN0eWxlZF9saXN0XCJ9IGFwaT17eH0gLz5cclxuXHJcbiAgICAgICAgPFN0YXRpY0Jhbm5lciB3aGVuPXtibG9jayA9PT0gXCJzdGF0aWNfYmFubmVyXCJ9IGFwaT17c3RhdGUuc291cmNlLmRhdGF9IGRhdGE9e3h9IC8+XHJcblxyXG4gICAgICAgIDxGcm9udF9mb3JtIHdoZW49e2Jsb2NrID09PSBcImtvbnRha3Rmb3JtdWxhclwifSB0ZXh0PXt4LnRleHR9Lz5cclxuICAgICBcclxuPEJsb2dGcm9udCB3aGVuPXtibG9jayA9PT0gXCJibG9nX2Zyb250XCJ9IGhlYWRlcj17eC5oZWFkZXJ9IHN0YXJ0cG9zdD17eC5zdGFydHBvc3R9IC8+XHJcbiAgICAgIDwvU3dpdGNoPlxyXG4gICAgICBcclxuXHJcbiAgICBcclxuICAgIDwvZGl2PlxyXG5cclxuICAgICl9XHJcbiAgIFxyXG48Lz5cclxuICAgIClcclxufVxyXG4gICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdChQYWdlKVxyXG4gICAgICBcclxuICAgICAgXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/grafikcentralen/src/components/page.js\n");

/***/ })

})