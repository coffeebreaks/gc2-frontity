webpackHotUpdate("gc2-frontity",{

/***/ "./packages/grafikcentralen/src/components/acf/blog_front.js":
/*!*******************************************************************!*\
  !*** ./packages/grafikcentralen/src/components/acf/blog_front.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.split.js */ \"./node_modules/core-js/modules/es.string.split.js\");\n/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _frontity_connect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @frontity/connect */ \"./node_modules/@frontity/connect/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _frontity_components_link__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @frontity/components/link */ \"./node_modules/@frontity/components/link/index.tsx\");\n/* harmony import */ var react_on_screen__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-on-screen */ \"./node_modules/react-on-screen/lib/index.js\");\n/* harmony import */ var react_on_screen__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_on_screen__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const BlogFront=({libraries,startpost,header,isVisible,state})=>{const[showCount,setCount]=Object(react__WEBPACK_IMPORTED_MODULE_6__[\"useState\"])(3);const Html=libraries.html2react.Component;const key=\"allposts/\";const acf=\"acf-settings/\";const posts=state.source.data[key].items;const startPost=state.source.data[key].items.filter(x=>x.id===startpost.ID);const forfattare=state.source.data[acf].acf.forfattare.filter(x=>x.post===startPost[0].author);const timeIcon=state.source.data[acf].acf.time_icon;const Wrapper=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g16\",label:\"Wrapper\"})( false?undefined:{name:\"12ysisd\",styles:\"display:flex;flex-direction:column;justify-content:center;max-width:1290px;align-items:center;margin:0 auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Header=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g15\",label:\"Header\"})( false?undefined:{name:\"1hw38ik\",styles:\"margin-top:4rem;text-align:center;h2{text-transform:uppercase;font-size:4rem;@media(max-width: 500px){font-size:2rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const FeaturedArticle=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"article\", false?undefined:{target:\"ekuka3g14\",label:\"FeaturedArticle\"})( false?undefined:{name:\"1cnj0jd\",styles:\"margin:2rem;box-shadow:0px 0px 15px 3px #0000002b;padding:2rem;@media(max-width: 800px){padding:0;margin:1rem;}display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const FeaturedContent=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g13\",label:\"FeaturedContent\"})( false?undefined:{name:\"zg39q2\",styles:\"display:flex;flex-direction:column;padding:2rem;@media(max-width:800px){padding:1rem;}h2{font-size:18px;@media(max-width: 600px){font-size:14px;}}p{@media(max-width: 600px){font-size:0.7rem;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFx3ZWJiXFxnYzItZnJvbnRpdHlcXHBhY2thZ2VzXFxncmFmaWtjZW50cmFsZW5cXHNyY1xcY29tcG9uZW50c1xcYWNmXFxibG9nX2Zyb250LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlEc0MiLCJmaWxlIjoiQzpcXHdlYmJcXGdjMi1mcm9udGl0eVxccGFja2FnZXNcXGdyYWZpa2NlbnRyYWxlblxcc3JjXFxjb21wb25lbnRzXFxhY2ZcXGJsb2dfZnJvbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29ubmVjdCBmcm9tIFwiQGZyb250aXR5L2Nvbm5lY3RcIlxyXG5pbXBvcnQge3N0eWxlZCwga2V5ZnJhbWVzfSBmcm9tIFwiZnJvbnRpdHlcIlxyXG5pbXBvcnQge3VzZVN0YXRlfSBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgTGluayBmcm9tIFwiQGZyb250aXR5L2NvbXBvbmVudHMvbGlua1wiO1xyXG5pbXBvcnQgVHJhY2tWaXNpYmlsaXR5IGZyb20gJ3JlYWN0LW9uLXNjcmVlbic7XHJcbmNvbnN0IEJsb2dGcm9udCA9ICh7bGlicmFyaWVzLCBzdGFydHBvc3QsIGhlYWRlciwgIGlzVmlzaWJsZSwgc3RhdGV9KSA9PiB7XHJcblxyXG4gICAgY29uc3QgW3Nob3dDb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoMylcclxuICAgIGNvbnN0IEh0bWwgPSBsaWJyYXJpZXMuaHRtbDJyZWFjdC5Db21wb25lbnQ7XHJcbiAgICBjb25zdCBrZXkgPSBcImFsbHBvc3RzL1wiXHJcbiAgICBjb25zdCBhY2YgPSBcImFjZi1zZXR0aW5ncy9cIlxyXG5cclxuICAgIGNvbnN0IHBvc3RzID0gc3RhdGUuc291cmNlLmRhdGFba2V5XS5pdGVtc1xyXG4gICAgY29uc3Qgc3RhcnRQb3N0ID0gc3RhdGUuc291cmNlLmRhdGFba2V5XS5pdGVtcy5maWx0ZXIoKHgpPT4geC5pZCA9PT0gc3RhcnRwb3N0LklEKVxyXG4gICAgY29uc3QgZm9yZmF0dGFyZSA9IHN0YXRlLnNvdXJjZS5kYXRhW2FjZl0uYWNmLmZvcmZhdHRhcmUuZmlsdGVyKCAoeCk9PiB4LnBvc3QgPT09IHN0YXJ0UG9zdFswXS5hdXRob3IpXHJcbiAgICBjb25zdCB0aW1lSWNvbiA9IHN0YXRlLnNvdXJjZS5kYXRhW2FjZl0uYWNmLnRpbWVfaWNvblxyXG4gICBcclxuICAgIFxyXG5cclxuXHJcbiAgICBjb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICAgICAgICBkaXNwbGF5OiBmbGV4OyBcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uIDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICBtYXgtd2lkdGg6IDEyOTBweCA7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlciA7XHJcbiAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcblxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IEhlYWRlciA9IHN0eWxlZC5kaXZgXHJcbiAgICAgICAgbWFyZ2luLXRvcDogNHJlbTtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblxyXG4gICAgICAgIGgyIHtcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZSA7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogNHJlbSA7XHJcbiAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbSA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRBcnRpY2xlID0gc3R5bGVkLmFydGljbGVgXHJcbiAgICAgICAgICAgIG1hcmdpbjogMnJlbTtcclxuICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDBweCAxNXB4IDNweCAjMDAwMDAwMmI7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDgwMHB4KXtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDFyZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcGxheTogZmxleCA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgYFxyXG5cclxuXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRDb250ZW50ID0gc3R5bGVkLmRpdmBcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gO1xyXG4gICAgICAgIHBhZGRpbmc6IDJyZW0gO1xyXG4gICAgICAgIEBtZWRpYShtYXgtd2lkdGg6ODAwcHgpe1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoMiB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcclxuICAgICAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAge1xyXG4gICAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA2MDBweCl7XHJcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuN3JlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICBcclxuICAgIGAgICAgXHJcblxyXG4gICAgY29uc3QgRmVhdHVyZWRJbWFnZSA9IHN0eWxlZC5pbWdgXHJcbiAgICAgICAgbWluLXdpZHRoOiA4MDBweDtcclxuICAgICAgXHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogMTMzMHB4KXtcclxuICAgICAgICAgICAgbWluLXdpZHRoOiAzMDBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgICAgICBtaW4td2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgIGhlaWdodDogMjAwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgXHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiA1NTBweCA7XHJcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXIgO1xyXG4gICAgYFxyXG5cclxuY29uc3QgYXV0aG9yID0gc3RhdGUuc291cmNlLmRhdGFbYWNmXS5hY2YuZm9yZmF0dGFyZS5maWx0ZXIoICh4KT0+IHgucG9zdCA9PT0gU3RyaW5nKHN0YXJ0UG9zdFswXS5hdXRob3IpIClcclxuXHJcblxyXG5cclxuY29uc3QgUHJvZmlsZXBpYyA9IHN0eWxlZC5pbWdgXHJcbiAgICBvYmplY3QtZml0OiBjb3ZlcjtcclxuICAgIGhlaWdodDogNDBweDtcclxuICAgIHdpZHRoOiA0MHB4O1xyXG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMSk7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbmBcclxuXHJcbmNvbnN0IEF1dGhvciA9IHN0eWxlZC5hZGRyZXNzYFxyXG4gICAgZGlzcGxheTogZmxleCA7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93IDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgO1xyXG4gICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbSA7XHJcbiAgICBwIHtcclxuICAgICBcclxuICAgIH1cclxuICBcclxuYFxyXG5cclxuY29uc3QgQXV0aG9yTmFtZSA9IHN0eWxlZC5wIGBcclxuICAgIGZvbnQtc3R5bGU6IGluaXRpYWw7XHJcbiAgICBtYXJnaW4tbGVmdDogMXJlbTtcclxuICAgIGNvbG9yOiAjMjk1MTZEO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgIGZvbnQtc2l6ZToxMHB4ICFpbXBvcnRhbnQgO1xyXG4gICAgICAgIHBhZGRpbmc6IDAgO1xyXG4gICAgfVxyXG4gICAgYFxyXG5cclxuY29uc3QgVGltZSA9IHN0eWxlZC50aW1lYFxyXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICBmb250LXNpemU6IDEycHggO1xyXG4gICAgZm9udC1zdHlsZTogaW5pdGlhbCA7XHJcbiAgICBkaXNwbGF5OiBmbGV4IDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyIDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgO1xyXG4gICAgcCB7XHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDhweCAhaW1wb3J0YW50IDtcclxuICAgICAgICB9XHJcbiAgICB9IFxyXG5cclxuICAgIGltZyB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4IDtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAzcHg7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IE1vYmlsZSA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgfVxyXG5gXHJcblxyXG5jb25zdCBEZXNrdG9wID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgQG1lZGlhKG1heC13aWR0aDogODAwcHgpe1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IFJlY2VudFBvc3RzID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgMWZyIDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDgwMHB4KXtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciA7XHJcbiAgICB9XHJcbmBcclxuXHJcbmNvbnN0IFBvc3QgPSBzdHlsZWQuYXJ0aWNsZWBcclxuICAgICBtYXJnaW46IDJyZW07XHJcbiAgICAgZGlzcGxheTogZmxleCA7XHJcbiAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiA7XHJcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTVweCAzcHggIzAwMDAwMDJiO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgICAgICAgICBAbWVkaWEobWF4LXdpZHRoOiA4MDBweCl7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAxcmVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXggO1xyXG5gXHJcblxyXG5jb25zdCBQb3N0SW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gICAgb2JqZWN0LWZpdDogY292ZXIgO1xyXG4gICAgaGVpZ2h0OiAxNTBweCA7XHJcbiAgICB3aWR0aDogMTAwJSA7XHJcbmBcclxuXHJcbmNvbnN0IFJlYWRtb3JlID0gc3R5bGVkKExpbmspYFxyXG4gICAgICAgIGNvbG9yOiAjNzI5ZWUxO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDAgO1xyXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcyOWVlMSAgO1xyXG4gICAgICAgIHdpZHRoOiBtYXgtY29udGVudDtcclxuICAgICAgICBtYXJnaW4tdG9wOiBhdXRvO1xyXG4gICAgICAgICBcclxuYFxyXG5cclxuY29uc3QgTGlua0NhcmQgPSBzdHlsZWQoTGluaylgXHJcbiAgICBjb2xvcjogaW5oZXJpdDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdDtcclxuICAgIEBtZWRpYShtYXgtd2lkdGg6IDEwMDBweCl7XHJcbiAgICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgIH1cclxuYFxyXG5cclxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbiBgXHJcbiAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XHJcbmBcclxuXHJcblxyXG5mdW5jdGlvbiBnZXRBdXRob3IocG9zdEF1dGhvcil7XHJcbiAgICByZXR1cm4gc3RhdGUuc291cmNlLmRhdGFbYWNmXS5hY2YuZm9yZmF0dGFyZS5maWx0ZXIoICh4KT0+IHgucG9zdCA9PT0gU3RyaW5nKHBvc3RBdXRob3IpIClbMF1cclxufVxyXG5cclxucmV0dXJuIChcclxuICAgIDxXcmFwcGVyPlxyXG4gICAgPEhlYWRlcj4gICAgXHJcbiAgICA8SHRtbCBodG1sPXtoZWFkZXJ9Lz5cclxuICAgIDwvSGVhZGVyPlxyXG4gICAgPEZlYXR1cmVkQXJ0aWNsZT5cclxuICAgICAgICAgICAgICAgIDxEZXNrdG9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDxGZWF0dXJlZEltYWdlIHNyYz17c3RhcnRQb3N0WzBdLmZlYXR1cmVkX2ltYWdlX3NyY30gLz5cclxuICAgICAgICAgICAgICAgIDwvRGVza3RvcD5cclxuICAgICAgICA8RmVhdHVyZWRDb250ZW50PlxyXG4gICAgIFxyXG4gICAgICAgICAgICA8QXV0aG9yPlxyXG4gICAgICAgICAgICAgICAgPFByb2ZpbGVwaWMgc3JjPXthdXRob3JbMF0uYmlsZC51cmx9IGFsdD17YXV0aG9yWzBdLmFsdH0gd2lkdGg9e2F1dGhvclswXS53aWR0aH0gaGVpZ2h0PXthdXRob3JbMF0uaGVpZ2h0fSAvPlxyXG4gICAgICAgICAgICAgICAgPEF1dGhvck5hbWUgcmVsPVwiYXV0aG9yXCI+e2F1dGhvclswXS5uYW1ufTwvQXV0aG9yTmFtZT5cclxuICAgICAgICAgICAgICAgIDxUaW1lIHB1YmRhdGUgZGF0ZXRpbWU9e3N0YXJ0UG9zdFswXS5kYXRlfT4gXHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3RpbWVJY29uLnVybH0gYWx0PXt0aW1lSWNvbi5hbHR9IHdpZHRoPXt0aW1lSWNvbi53aWR0aH0gaGVpZ2h0PXt0aW1lSWNvbi5oZWlnaHR9Lz5cclxuICAgICAgICAgICAgICAgICAgICA8cD57c3RhcnRQb3N0WzBdLmRhdGUuc3BsaXQoXCJUXCIpWzBdfTwvcD5cclxuICAgICAgICAgICAgICAgIDwvVGltZT5cclxuICAgICAgICAgICAgPC9BdXRob3I+XHJcbiAgICAgICAgICAgIDxNb2JpbGU+XHJcbiAgICAgICAgICAgICAgICA8RmVhdHVyZWRJbWFnZSBzcmM9e3N0YXJ0UG9zdFswXS5mZWF0dXJlZF9pbWFnZV9zcmN9IC8+XHJcbiAgICAgICAgICAgIDwvTW9iaWxlPlxyXG4gICAgICAgICAgICA8aDI+e3N0YXJ0UG9zdFswXS50aXRsZS5yZW5kZXJlZH08L2gyPlxyXG4gICAgICAgICAgICA8SHRtbCBodG1sPXtzdGFydFBvc3RbMF0uZXhjZXJwdC5yZW5kZXJlZH0gLz4gXHJcbiAgICAgICAgICAgIDxSZWFkbW9yZSBocmVmPXtzdGFydFBvc3RbMF0ubGlua30+IEzDpHMgaGVsYSBhcnRpa2VsbjwvUmVhZG1vcmU+XHJcbiAgICAgICAgICAgIHtjb25zb2xlLmxvZyhcInN0YXJ0cG9zdFwiLCBzdGFydFBvc3RbMF0pfVxyXG4gICAgICAgIDwvRmVhdHVyZWRDb250ZW50PlxyXG5cclxuXHJcbiAgICAgICAgPC9GZWF0dXJlZEFydGljbGU+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPFJlY2VudFBvc3RzPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9BbGwgcG9zdHNcclxuICAgICAgICBwb3N0cy5tYXAoKHgsaSk9PiBcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAge2kgPCBzaG93Q291bnQ/XHJcbiAgICAgICAgPFBvc3Q+XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8TGlua0NhcmQgbGluaz17eC5saW5rfT5cclxuICAgICAgICAgICAgICAgIDxBdXRob3I+XHJcbiAgICAgICAgICAgICAgICA8UHJvZmlsZXBpYyBzcmM9e2dldEF1dGhvcih4LmF1dGhvcikuYmlsZC51cmx9IGFsdD17Z2V0QXV0aG9yKHguYXV0aG9yKS5hbHR9IHdpZHRoPXtnZXRBdXRob3IoeC5hdXRob3IpLndpZHRofSBoZWlnaHQ9e2dldEF1dGhvcih4LmF1dGhvcikuaGVpZ2h0fSAvPlxyXG4gICAgICAgICAgICAgICAgPEF1dGhvck5hbWUgcmVsPVwiYXV0aG9yXCI+e2dldEF1dGhvcih4LmF1dGhvcikubmFtbn08L0F1dGhvck5hbWU+XHJcbiAgICAgICAgICAgICAgICA8VGltZSBwdWJkYXRlIGRhdGV0aW1lPXt4Lm1vZGlmaWVkfT4gXHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3RpbWVJY29uLnVybH0gYWx0PXt0aW1lSWNvbi5hbHR9IHdpZHRoPXt0aW1lSWNvbi53aWR0aH0gaGVpZ2h0PXt0aW1lSWNvbi5oZWlnaHR9Lz5cclxuICAgICAgICAgICAgICAgICAgICA8cD57eC5tb2RpZmllZC5zcGxpdChcIlRcIilbMF19PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9UaW1lPlxyXG4gICAgICAgICAgICAgICAgPC9BdXRob3I+XHJcbiAgICAgICAgICAgICAgICA8cD57eC50aXRsZS5yZW5kZXJlZH08L3A+XHJcbiAgICAgICAgICAgICAgICA8UG9zdEltYWdlIHNyYz17eC5mZWF0dXJlZF9pbWFnZV9zcmN9IC8+XHJcbiAgICAgICAgICAgICAgICA8SHRtbCBodG1sPXt4LmV4Y2VycHQucmVuZGVyZWR9IC8+XHJcbiAgICAgICAgICAgICAgICA8UmVhZG1vcmUgbGluaz17eC5saW5rfT4g4oCiIEzDpHMgaGVsYSBhcnRpa2VsbjwvUmVhZG1vcmU+XHJcbiAgICAgICAgICAgICAgICA8L0xpbmtDYXJkPlxyXG5cclxuXHJcbiAgICAgICAgICAgIDwvUG9zdD5cclxuICAgICAgICAgICAgICAgIDpcIlwifVxyXG4gICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgICAgPC9SZWNlbnRQb3N0cz5cclxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpPT4gc2V0Q291bnQoOTkpfT4gVmlzYSBmbGVyIG55aGV0ZXI8L0J1dHRvbj4gXHJcblxyXG5cclxuICAgIDwvV3JhcHBlcj5cclxuXHJcbilcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoQmxvZ0Zyb250KVxyXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const FeaturedImage=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"img\", false?undefined:{target:\"ekuka3g12\",label:\"FeaturedImage\"})( false?undefined:{name:\"jhz0dy\",styles:\"min-width:800px;@media(max-width: 1330px){min-width:300px;}@media(max-width: 800px){min-width:100%;height:200px;}width:100%;height:550px;object-fit:cover\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const author=state.source.data[acf].acf.forfattare.filter(x=>x.post===String(startPost[0].author));const Profilepic=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"img\", false?undefined:{target:\"ekuka3g11\",label:\"Profilepic\"})( false?undefined:{name:\"e72zod\",styles:\"object-fit:cover;height:40px;width:40px;filter:grayscale(1);border-radius:50%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Author=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"address\", false?undefined:{target:\"ekuka3g10\",label:\"Author\"})( false?undefined:{name:\"iq2825\",styles:\"display:flex;flex-direction:row;align-items:center;font-size:12px;margin-bottom:2rem;p{}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const AuthorName=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"p\", false?undefined:{target:\"ekuka3g9\",label:\"AuthorName\"})( false?undefined:{name:\"1kq41hy\",styles:\"font-style:initial;margin-left:1rem;color:#29516D;@media(max-width: 600px){font-size:10px!important;padding:0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Time=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"time\", false?undefined:{target:\"ekuka3g8\",label:\"Time\"})( false?undefined:{name:\"o2rsq1\",styles:\"margin-left:auto;font-size:12px;font-style:initial;display:flex;justify-content:center;align-items:center;p{@media(max-width: 600px){font-size:8px!important;}}img{margin-right:10px;margin-bottom:3px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Mobile=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g7\",label:\"Mobile\"})( false?undefined:{name:\"17lygek\",styles:\"display:none;@media(max-width: 800px){display:block;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Desktop=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g6\",label:\"Desktop\"})( false?undefined:{name:\"1aoy9fr\",styles:\"display:block;@media(max-width: 800px){display:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const RecentPosts=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"div\", false?undefined:{target:\"ekuka3g5\",label:\"RecentPosts\"})( false?undefined:{name:\"15ahxrn\",styles:\"display:grid;grid-template-columns:1fr 1fr 1fr;@media(max-width: 800px){grid-template-columns:1fr;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Post=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"article\", false?undefined:{target:\"ekuka3g4\",label:\"Post\"})( false?undefined:{name:\"10bcsi9\",styles:\"margin:2rem;display:flex;flex-direction:column;box-shadow:0px 0px 15px 3px #0000002b;padding:2rem;@media(max-width: 800px){padding:0;margin:1rem;}display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const PostImage=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"img\", false?undefined:{target:\"ekuka3g3\",label:\"PostImage\"})( false?undefined:{name:\"1qcpa4d\",styles:\"object-fit:cover;height:150px;width:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Readmore=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_7__[\"default\"], false?undefined:{target:\"ekuka3g2\",label:\"Readmore\"})( false?undefined:{name:\"am7vci\",styles:\"color:#729ee1;font-weight:500;text-decoration:none;border-bottom:1px solid #729ee1;width:max-content;margin-top:auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const LinkCard=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_7__[\"default\"], false?undefined:{target:\"ekuka3g1\",label:\"LinkCard\"})( false?undefined:{name:\"13tsus7\",styles:\"color:inherit;text-decoration:inherit;@media(max-width: 1000px){padding:1rem;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Button=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"button\", false?undefined:{target:\"ekuka3g0\",label:\"Button\"})( false?undefined:{name:\"1rkt2zp\",styles:\"padding:1rem;background:white;outline:none;border:1px solid black\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});function getAuthor(postAuthor){return state.source.data[acf].acf.forfattare.filter(x=>x.post===String(postAuthor))[0];}return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Wrapper,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Header,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Html,{html:header})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(FeaturedArticle,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Desktop,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(FeaturedImage,{src:startPost[0].featured_image_src})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(FeaturedContent,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Author,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Profilepic,{src:author[0].bild.url,alt:author[0].alt,width:author[0].width,height:author[0].height}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(AuthorName,{rel:\"author\",children:author[0].namn}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Time,{pubdate:true,datetime:startPost[0].date,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:timeIcon.url,alt:timeIcon.alt,width:timeIcon.width,height:timeIcon.height}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:startPost[0].date.split(\"T\")[0]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Mobile,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(FeaturedImage,{src:startPost[0].featured_image_src})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"h2\",{children:startPost[0].title.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Html,{html:startPost[0].excerpt.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Readmore,{href:startPost[0].link,children:\" L\\xE4s hela artikeln\"}),console.log(\"startpost\",startPost[0])]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(RecentPosts,{children://All posts\nposts.map((x,i)=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"Fragment\"],{children:i<showCount?Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Post,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(LinkCard,{link:x.link,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Author,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Profilepic,{src:getAuthor(x.author).bild.url,alt:getAuthor(x.author).alt,width:getAuthor(x.author).width,height:getAuthor(x.author).height}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(AuthorName,{rel:\"author\",children:getAuthor(x.author).namn}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsxs\"])(Time,{pubdate:true,datetime:x.modified,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"img\",{src:timeIcon.url,alt:timeIcon.alt,width:timeIcon.width,height:timeIcon.height}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:x.modified.split(\"T\")[0]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(\"p\",{children:x.title.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(PostImage,{src:x.featured_image_src}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Html,{html:x.excerpt.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Readmore,{link:x.link,children:\" \\u2022 L\\xE4s hela artikeln\"})]})}):\"\"}))}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__[\"jsx\"])(Button,{onClick:()=>setCount(99),children:\" Visa fler nyheter\"})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_frontity_connect__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(BlogFront));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/grafikcentralen/src/components/acf/blog_front.js\n");

/***/ })

})