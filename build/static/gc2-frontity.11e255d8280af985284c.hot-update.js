webpackHotUpdate("gc2-frontity",{

/***/ "./packages/grafikcentralen/src/components/acf/link_blocks.js":
/*!********************************************************************!*\
  !*** ./packages/grafikcentralen/src/components/acf/link_blocks.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _frontity_connect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @frontity/connect */ \"./node_modules/@frontity/connect/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_on_screen__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-on-screen */ \"./node_modules/react-on-screen/lib/index.js\");\n/* harmony import */ var react_on_screen__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_on_screen__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nlet _=t=>t,_t,_t2,_t3;function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const LinkBlocks=({libraries,isVisible,title,text,blocks,arrow})=>{const Html=libraries.html2react.Component;const slide=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"keyframes\"])(_t||(_t=_`\n    0% {\n        transform: rotate3d(0, 1, 0, 45deg);\n    }\n    100% {\n        opacity: 1;\n        transform: rotate3d(0, 1, 0, 0deg) ;\n     \n    }\n    `));const slideRestore=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"keyframes\"])(_t2||(_t2=_`\n        0% {\n            opacity: 1;\n        }\n        100% {\n            opacity: 0;\n        }\n    `));const Image=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"img\", false?undefined:{target:\"e1e958mm9\",label:\"Image\"})( false?undefined:{name:\"9wi73b\",styles:\"width:100%;height:100%;object-fit:cover;object-position:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Wrapper=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1e958mm8\",label:\"Wrapper\"})( false?undefined:{name:\"55j2vu\",styles:\"width:100%;overflow:hidden;display:block;position:relative;text-align:center;h2{margin-top:6rem;padding:1rem;text-transform:uppercase;font-size:3rem;margin-bottom:0;}p{margin:0 auto;max-width:30ch;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const MonoImage=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"img\", false?undefined:{target:\"e1e958mm7\",label:\"MonoImage\"})( false?undefined:{name:\"1lluqph\",styles:\"width:100%;opacity:0;height:320px;object-fit:cover;filter:grayscale(1) brightness(0.5) contrast(1);object-position:center;flex-basis:100%;position:relative;transition:.5s;&:hover{transition:.5s;filter:grayscale(0) brightness(0.5) contrast(1);}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFx3ZWJiXFxnYzItZnJvbnRpdHlcXHBhY2thZ2VzXFxncmFmaWtjZW50cmFsZW5cXHNyY1xcY29tcG9uZW50c1xcYWNmXFxsaW5rX2Jsb2Nrcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyRGdDIiwiZmlsZSI6IkM6XFx3ZWJiXFxnYzItZnJvbnRpdHlcXHBhY2thZ2VzXFxncmFmaWtjZW50cmFsZW5cXHNyY1xcY29tcG9uZW50c1xcYWNmXFxsaW5rX2Jsb2Nrcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25uZWN0IGZyb20gXCJAZnJvbnRpdHkvY29ubmVjdFwiXHJcbmltcG9ydCB7c3R5bGVkLCBrZXlmcmFtZXN9IGZyb20gXCJmcm9udGl0eVwiXHJcbmltcG9ydCBUcmFja1Zpc2liaWxpdHkgZnJvbSAncmVhY3Qtb24tc2NyZWVuJztcclxuXHJcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuXHJcbmNvbnN0IExpbmtCbG9ja3MgPSh7bGlicmFyaWVzLCBpc1Zpc2libGUsIHRpdGxlLCB0ZXh0LCBibG9ja3MsIGFycm93IH0pPT4ge1xyXG5cclxuICAgIGNvbnN0IEh0bWwgPSBsaWJyYXJpZXMuaHRtbDJyZWFjdC5Db21wb25lbnQ7XHJcblxyXG4gICAgY29uc3Qgc2xpZGUgPSBrZXlmcmFtZXNgXHJcbiAgICAwJSB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAxLCAwLCA0NWRlZyk7XHJcbiAgICB9XHJcbiAgICAxMDAlIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMSwgMCwgMGRlZykgO1xyXG4gICAgIFxyXG4gICAgfVxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IHNsaWRlUmVzdG9yZSA9IGtleWZyYW1lc2BcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDEwMCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIGBcclxuXHJcbiAgICBjb25zdCBJbWFnZSA9IHN0eWxlZC5pbWdgXHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gICAgICAgIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xyXG5cclxuICAgIGBcclxuICAgIGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgZGlzcGxheTpibG9jaztcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIGgyIHtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogNnJlbTtcclxuICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAzcmVtO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDMwY2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIGBcclxuXHJcbiAgICBjb25zdCBNb25vSW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgaGVpZ2h0OiAzMjBweDtcclxuICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcclxuICAgICAgICBmaWx0ZXI6IGdyYXlzY2FsZSgxKSBicmlnaHRuZXNzKDAuNSkgY29udHJhc3QoMSk7XHJcbiAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XHJcbiAgICAgICAgZmxleC1iYXNpczogMTAwJTtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogLjVzO1xyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAuNXM7XHJcbiAgICAgICAgICAgIGZpbHRlcjogZ3JheXNjYWxlKDApIGJyaWdodG5lc3MoMC41KSBjb250cmFzdCgxKTtcclxuICAgICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgSW1hZ2VGbGV4ID0gc3R5bGVkLmRpdmBcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZmxvdzogcm93O1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDZyZW07XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbjtcclxuICAgICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgICAgICAgIGNvbnN0IFRleHQgPSBzdHlsZWQuZGl2YFxyXG4gICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICBib3R0b206IC0xMDBweDtcclxuICAgICAgICAgICB0cmFuc2l0aW9uOiAuNXMgO1xyXG4gICAgICAgICAgIGxlZnQ6IDEwcHg7XHJcbiAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgYm90dG9tOiAxMHB4O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICBoMyB7XHJcbiAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgICAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xyXG4gICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjg7XHJcbiAgICAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgYFxyXG5cclxuICAgIGNvbnN0IEltYWdlQmxvY2sgPSBzdHlsZWQuZGl2YFxyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OjMwM3B4O1xyXG4gICAgICAgIGFuaW1hdGlvbjogJHtwcm9wcyA9PiBwcm9wcy5pc1Zpc2libGU/c2xpZGU6c2xpZGVSZXN0b3JlfTtcclxuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7aXNWaXNpYmxlPy41Oi41fXM7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAke2lzVmlzaWJsZT9wcm9wcyA9PiAocHJvcHMuZGVsYXkgKSAqIDAuNDowfXM7XHJcbiAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcclxuICAgICAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gICAgICAgICY6aG92ZXIgJHtUZXh0fSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246IC41cyA7XHJcbiAgICAgICAgICAgIGJvdHRvbTogMTBweDtcclxuICAgICAgICAgICAgaDMge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICM1MTk2ZmY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBgXHJcblxyXG4gICAgY29uc3QgQXJyb3cgPSBzdHlsZWQuaW1nYFxyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgcmlnaHQ6IDEwcHg7XHJcbiAgICAgICAgei1pbmRleDogOTk7XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgU2luZ2xlQmxvY2sgPSBzdHlsZWQoVHJhY2tWaXNpYmlsaXR5KWBcclxuICAgIG1pbi1oZWlnaHQ6IDMxMHB4O1xyXG4gICAgYmFja2dyb3VuZDogZ3JheTtcclxuICAgIG1hcmdpbjogMnJlbTtcclxuICAgIGBcclxuXHJcbiAgICBjb25zdCBEb3RzRmFkZSA9IGtleWZyYW1lc2BcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAuNTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDcwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IERvdCA9IHN0eWxlZC5kaXZgXHJcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgICAgIGJhY2tncm91bmQ6IGdyZWVuO1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIG1hcmdpbjogMXJlbTtcclxuICAgICAgICB0b3A6IDBweDtcclxuICAgICAgICBhbmltYXRpb246ICR7RG90c0ZhZGV9O1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogJHtwcm9wcyA9PiAocHJvcHMuZGVsYXkvNCl9cztcclxuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICAke3Byb3BzID0+IChwcm9wcy5zcGVlZC80KX1zO1xyXG4gICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xyXG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmQ7XHJcblxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IERvdEZsZXggPSBzdHlsZWQuZGl2YFxyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1mbG93OiByb3c7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgIFxyXG4gICAgICAgIGBcclxuICAgIFxyXG4gICAgY29uc3QgTG9hZGluZ0RvdHMgPSAoKT0+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8RG90RmxleD5cclxuICAgICAgICAgICAgICAgIDxEb3Qgc3BlZWQ9XCIzXCIgZGVsYXk9XCIxXCIvPlxyXG4gICAgICAgICAgICAgICAgPERvdCBzcGVlZD1cIjNcIiBkZWxheT1cIjJcIi8+XHJcbiAgICAgICAgICAgICAgICA8RG90IHNwZWVkPVwiM1wiIGRlbGF5PVwiM1wiLz5cclxuICAgICAgICAgICAgPC9Eb3RGbGV4PlxyXG4gICAgICAgIClcclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFdyYXBwZXI+XHJcbiAgICAgICAgICAgIDxoMj57dGl0bGV9PC9oMj5cclxuICAgICAgICAgICAgPEh0bWwgaHRtbD17dGV4dH0vPlxyXG4gICAgICAgICAgICA8SW1hZ2VGbGV4PlxyXG4gICAgICAgICAgICAgICAge2Jsb2Nrcy5tYXAoKHgsIGkpPT5cclxuICAgICAgICAgICAgICAgIDxTaW5nbGVCbG9jayBwYXJ0aWFsVmlzaWJpbGl0eT5cclxuICAgICAgICAgICAgICAgIDxJbWFnZUJsb2NrIGRlbGF5PXtpfSBpc1Zpc2libGU9e2lzVmlzaWJsZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPExvYWRpbmdEb3RzLz5cclxuICAgICAgICAgICAgICAgICAgICA8TW9ub0ltYWdlIHNyYz17eC5pbWFnZS51cmx9Lz5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dD5cclxuICAgICAgICAgICAgICAgICAgICA8SHRtbCBodG1sPXt4LnRleHR9Lz5cclxuICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgICAgICAgICA8QXJyb3cgc3JjPXthcnJvdy51cmx9Lz5cclxuICAgICAgICAgICAgICAgIDwvSW1hZ2VCbG9jaz5cclxuICAgICAgICAgICAgICAgIDwvU2luZ2xlQmxvY2s+XHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICA8L0ltYWdlRmxleD5cclxuICAgICAgICA8L1dyYXBwZXI+XHJcblxyXG4gICAgKVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChMaW5rQmxvY2tzKSJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ImageFlex=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1e958mm6\",label:\"ImageFlex\"})( false?undefined:{name:\"1afmo0m\",styles:\"display:flex;flex-flow:row;margin-top:6rem;justify-content:space-evenly;@media(max-width: 600px){flex-flow:column;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Text=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1e958mm5\",label:\"Text\"})( false?undefined:{name:\"z8crj1\",styles:\"position:absolute;bottom:-100px;transition:.5s;left:10px;color:white;@media(max-width: 500px){bottom:10px;}h3{text-transform:uppercase;text-align:left;font-size:2rem;@media(max-width: 500px){font-size:20px;text-align:center;}}p{opacity:0;text-align:left;margin:0px;color:white;line-height:1.8;@media(max-width: 500px){opacity:1;font-size:12px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ImageBlock=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1e958mm4\",label:\"ImageBlock\"})(\"opacity:0;width:100%;height:303px;animation:\",props=>props.isVisible?slide:slideRestore,\";animation-duration:\",isVisible?.5:.5,\"s;animation-delay:\",isVisible?props=>props.delay*0.4:0,\"s;animation-iteration-count:1;animation-fill-mode:forwards;position:relative;&:hover \",Text,\"{transition:.5s;bottom:10px;h3{color:#5196ff;}p{opacity:1;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFx3ZWJiXFxnYzItZnJvbnRpdHlcXHBhY2thZ2VzXFxncmFmaWtjZW50cmFsZW5cXHNyY1xcY29tcG9uZW50c1xcYWNmXFxsaW5rX2Jsb2Nrcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3SGlDIiwiZmlsZSI6IkM6XFx3ZWJiXFxnYzItZnJvbnRpdHlcXHBhY2thZ2VzXFxncmFmaWtjZW50cmFsZW5cXHNyY1xcY29tcG9uZW50c1xcYWNmXFxsaW5rX2Jsb2Nrcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25uZWN0IGZyb20gXCJAZnJvbnRpdHkvY29ubmVjdFwiXHJcbmltcG9ydCB7c3R5bGVkLCBrZXlmcmFtZXN9IGZyb20gXCJmcm9udGl0eVwiXHJcbmltcG9ydCBUcmFja1Zpc2liaWxpdHkgZnJvbSAncmVhY3Qtb24tc2NyZWVuJztcclxuXHJcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xyXG5cclxuXHJcbmNvbnN0IExpbmtCbG9ja3MgPSh7bGlicmFyaWVzLCBpc1Zpc2libGUsIHRpdGxlLCB0ZXh0LCBibG9ja3MsIGFycm93IH0pPT4ge1xyXG5cclxuICAgIGNvbnN0IEh0bWwgPSBsaWJyYXJpZXMuaHRtbDJyZWFjdC5Db21wb25lbnQ7XHJcblxyXG4gICAgY29uc3Qgc2xpZGUgPSBrZXlmcmFtZXNgXHJcbiAgICAwJSB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUzZCgwLCAxLCAwLCA0NWRlZyk7XHJcbiAgICB9XHJcbiAgICAxMDAlIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlM2QoMCwgMSwgMCwgMGRlZykgO1xyXG4gICAgIFxyXG4gICAgfVxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IHNsaWRlUmVzdG9yZSA9IGtleWZyYW1lc2BcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDEwMCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIH1cclxuICAgIGBcclxuXHJcbiAgICBjb25zdCBJbWFnZSA9IHN0eWxlZC5pbWdgXHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gICAgICAgIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xyXG5cclxuICAgIGBcclxuICAgIGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgZGlzcGxheTpibG9jaztcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIGgyIHtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogNnJlbTtcclxuICAgICAgICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAzcmVtO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcCB7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDMwY2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIGBcclxuXHJcbiAgICBjb25zdCBNb25vSW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgaGVpZ2h0OiAzMjBweDtcclxuICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcclxuICAgICAgICBmaWx0ZXI6IGdyYXlzY2FsZSgxKSBicmlnaHRuZXNzKDAuNSkgY29udHJhc3QoMSk7XHJcbiAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XHJcbiAgICAgICAgZmxleC1iYXNpczogMTAwJTtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgdHJhbnNpdGlvbjogLjVzO1xyXG4gICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAuNXM7XHJcbiAgICAgICAgICAgIGZpbHRlcjogZ3JheXNjYWxlKDApIGJyaWdodG5lc3MoMC41KSBjb250cmFzdCgxKTtcclxuICAgICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgSW1hZ2VGbGV4ID0gc3R5bGVkLmRpdmBcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZmxvdzogcm93O1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDZyZW07XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XHJcbiAgICAgICAgQG1lZGlhKG1heC13aWR0aDogNjAwcHgpe1xyXG4gICAgICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbjtcclxuICAgICAgICB9XHJcbiAgICBgXHJcblxyXG4gICAgICAgICAgIGNvbnN0IFRleHQgPSBzdHlsZWQuZGl2YFxyXG4gICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICBib3R0b206IC0xMDBweDtcclxuICAgICAgICAgICB0cmFuc2l0aW9uOiAuNXMgO1xyXG4gICAgICAgICAgIGxlZnQ6IDEwcHg7XHJcbiAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgYm90dG9tOiAxMHB4O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICBoMyB7XHJcbiAgICAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcclxuICAgICAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xyXG4gICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjg7XHJcbiAgICAgICAgICAgICAgIEBtZWRpYShtYXgtd2lkdGg6IDUwMHB4KXtcclxuICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgYFxyXG5cclxuICAgIGNvbnN0IEltYWdlQmxvY2sgPSBzdHlsZWQuZGl2YFxyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OjMwM3B4O1xyXG4gICAgICAgIGFuaW1hdGlvbjogJHtwcm9wcyA9PiBwcm9wcy5pc1Zpc2libGU/c2xpZGU6c2xpZGVSZXN0b3JlfTtcclxuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7aXNWaXNpYmxlPy41Oi41fXM7XHJcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAke2lzVmlzaWJsZT9wcm9wcyA9PiAocHJvcHMuZGVsYXkgKSAqIDAuNDowfXM7XHJcbiAgICAgICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMTtcclxuICAgICAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcblxyXG4gICAgICAgICY6aG92ZXIgJHtUZXh0fSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246IC41cyA7XHJcbiAgICAgICAgICAgIGJvdHRvbTogMTBweDtcclxuICAgICAgICAgICAgaDMge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICM1MTk2ZmY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcCB7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBgXHJcblxyXG4gICAgY29uc3QgQXJyb3cgPSBzdHlsZWQuaW1nYFxyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB0b3A6IDEwcHg7XHJcbiAgICAgICAgcmlnaHQ6IDEwcHg7XHJcbiAgICAgICAgei1pbmRleDogOTk7XHJcbiAgICBgXHJcblxyXG4gICAgY29uc3QgU2luZ2xlQmxvY2sgPSBzdHlsZWQoVHJhY2tWaXNpYmlsaXR5KWBcclxuICAgIG1pbi1oZWlnaHQ6IDMxMHB4O1xyXG4gICAgYmFja2dyb3VuZDogZ3JheTtcclxuICAgIG1hcmdpbjogMnJlbTtcclxuICAgIGBcclxuXHJcbiAgICBjb25zdCBEb3RzRmFkZSA9IGtleWZyYW1lc2BcclxuICAgICAgICAwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICA1MCUge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAuNTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIDcwJSB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IERvdCA9IHN0eWxlZC5kaXZgXHJcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgICAgIGJhY2tncm91bmQ6IGdyZWVuO1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIG1hcmdpbjogMXJlbTtcclxuICAgICAgICB0b3A6IDBweDtcclxuICAgICAgICBhbmltYXRpb246ICR7RG90c0ZhZGV9O1xyXG4gICAgICAgIGFuaW1hdGlvbi1kZWxheTogJHtwcm9wcyA9PiAocHJvcHMuZGVsYXkvNCl9cztcclxuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICAke3Byb3BzID0+IChwcm9wcy5zcGVlZC80KX1zO1xyXG4gICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xyXG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmQ7XHJcblxyXG4gICAgYFxyXG5cclxuICAgIGNvbnN0IERvdEZsZXggPSBzdHlsZWQuZGl2YFxyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1mbG93OiByb3c7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgIFxyXG4gICAgICAgIGBcclxuICAgIFxyXG4gICAgY29uc3QgTG9hZGluZ0RvdHMgPSAoKT0+IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8RG90RmxleD5cclxuICAgICAgICAgICAgICAgIDxEb3Qgc3BlZWQ9XCIzXCIgZGVsYXk9XCIxXCIvPlxyXG4gICAgICAgICAgICAgICAgPERvdCBzcGVlZD1cIjNcIiBkZWxheT1cIjJcIi8+XHJcbiAgICAgICAgICAgICAgICA8RG90IHNwZWVkPVwiM1wiIGRlbGF5PVwiM1wiLz5cclxuICAgICAgICAgICAgPC9Eb3RGbGV4PlxyXG4gICAgICAgIClcclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFdyYXBwZXI+XHJcbiAgICAgICAgICAgIDxoMj57dGl0bGV9PC9oMj5cclxuICAgICAgICAgICAgPEh0bWwgaHRtbD17dGV4dH0vPlxyXG4gICAgICAgICAgICA8SW1hZ2VGbGV4PlxyXG4gICAgICAgICAgICAgICAge2Jsb2Nrcy5tYXAoKHgsIGkpPT5cclxuICAgICAgICAgICAgICAgIDxTaW5nbGVCbG9jayBwYXJ0aWFsVmlzaWJpbGl0eT5cclxuICAgICAgICAgICAgICAgIDxJbWFnZUJsb2NrIGRlbGF5PXtpfSBpc1Zpc2libGU9e2lzVmlzaWJsZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPExvYWRpbmdEb3RzLz5cclxuICAgICAgICAgICAgICAgICAgICA8TW9ub0ltYWdlIHNyYz17eC5pbWFnZS51cmx9Lz5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dD5cclxuICAgICAgICAgICAgICAgICAgICA8SHRtbCBodG1sPXt4LnRleHR9Lz5cclxuICAgICAgICAgICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgICAgICAgICA8QXJyb3cgc3JjPXthcnJvdy51cmx9Lz5cclxuICAgICAgICAgICAgICAgIDwvSW1hZ2VCbG9jaz5cclxuICAgICAgICAgICAgICAgIDwvU2luZ2xlQmxvY2s+XHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICA8L0ltYWdlRmxleD5cclxuICAgICAgICA8L1dyYXBwZXI+XHJcblxyXG4gICAgKVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChMaW5rQmxvY2tzKSJdfQ== */\"));const Arrow=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"img\", false?undefined:{target:\"e1e958mm3\",label:\"Arrow\"})( false?undefined:{name:\"r03cb9\",styles:\"position:absolute;top:10px;right:10px;z-index:99\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const SingleBlock=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(react_on_screen__WEBPACK_IMPORTED_MODULE_2___default.a, false?undefined:{target:\"e1e958mm2\",label:\"SingleBlock\"})( false?undefined:{name:\"1bntal1\",styles:\"min-height:310px;background:gray;margin:2rem\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const DotsFade=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"keyframes\"])(_t3||(_t3=_`\n        0% {\n            opacity: 0;\n        }\n\n        50% {\n            opacity: .5;\n        }\n\n        70% {\n            opacity: 1;\n        }\n\n\n        \n\n    `));const Dot=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1e958mm1\",label:\"Dot\"})(\"height:20px;width:20px;background:green;position:relative;opacity:0;margin:1rem;top:0px;animation:\",DotsFade,\";animation-delay:\",props=>props.delay/4,\"s;animation-duration:\",props=>props.speed/4,\"s;animation-iteration-count:infinite;animation-fill-mode:forward;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const DotFlex=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1e958mm0\",label:\"DotFlex\"})( false?undefined:{name:\"199qp4a\",styles:\"display:flex;flex-flow:row;width:100%;height:100%;justify-content:center;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const LoadingDots=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsxs\"])(DotFlex,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Dot,{speed:\"3\",delay:\"1\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Dot,{speed:\"3\",delay:\"2\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Dot,{speed:\"3\",delay:\"3\"})]});};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsxs\"])(Wrapper,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"h2\",{children:title}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Html,{html:text}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(ImageFlex,{children:blocks.map((x,i)=>Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(SingleBlock,{partialVisibility:true,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsxs\"])(ImageBlock,{delay:i,isVisible:isVisible,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(LoadingDots,{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(MonoImage,{src:x.image.url}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Text,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Html,{html:x.text})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Arrow,{src:arrow.url})]})}))})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_frontity_connect__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(LinkBlocks));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/grafikcentralen/src/components/acf/link_blocks.js\n");

/***/ })

})